pipeline {
    agent any
    
    stages {
        stage('Check Python Availability') {
            steps {
                script {
                    // Try to find available Python interpreter
                    def pythonCommands = ['python3', 'python', '/usr/bin/python3', '/usr/bin/python']
                    env.PYTHON_CMD = null
                    
                    for (cmd in pythonCommands) {
                        try {
                            sh "${cmd} --version"
                            env.PYTHON_CMD = cmd
                            echo "Using Python: ${cmd}"
                            break
                        } catch (Exception e) {
                            echo "${cmd} not available"
                        }
                    }
                    
                    if (env.PYTHON_CMD == null) {
                        error "No Python interpreter found. Please install Python in the Jenkins environment."
                    }
                    
                    // Set pip command based on python command
                    env.PIP_CMD = env.PYTHON_CMD.replace('python', 'pip')
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                dir('messaging_app') {
                    sh "${env.PYTHON_CMD} -m venv venv"
                    sh "source venv/bin/activate && ${env.PYTHON_CMD} --version"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh "source venv/bin/activate && ${env.PIP_CMD} install -r requirements.txt"
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh "source venv/bin/activate && ${env.PYTHON_CMD} -m pytest --junitxml=test-results.xml"
                }
            }
            post {
                always {
                    junit 'messaging_app/test-results.xml'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed'
        }
    }
}