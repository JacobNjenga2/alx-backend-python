pipeline {
    agent any
    
    stages {
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh 'pip install -r requirements.txt --break-system-packages'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    script {
                        def testFiles = findFiles(glob: '**/test_*.py')
                        def testDirs = findFiles(glob: '**/tests/**/*.py')
                        
                        if (testFiles.length > 0 || testDirs.length > 0) {
                            sh 'python -m pytest --junitxml=test-results.xml'
                        } else {
                            echo 'No test files found - creating empty test results'
                            sh 'echo \"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><testsuite name=\\"pytest\\" tests=\\"0\\" failures=\\"0\\"/>\" > test-results.xml'
                        }
                    }
                }
            }
            post {
                always {
                    junit 'messaging_app/test-results.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('messaging_app') {
                    script {
                        if (!fileExists('Dockerfile')) {
                            writeFile file: 'Dockerfile', text: '''
FROM python:3.9-slim
WORKDIR /app
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
RUN apt-get update && apt-get install -y \
    gcc \
    default-libmysqlclient-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 8000
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
'''
                        }
                        
                        sh "docker build -t ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} ."
                        sh "docker tag ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} ${env.DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                dir('messaging_app') {
                    script {
                        withCredentials([usernamePassword(
                            credentialsId: 'docker-hub-credentials',
                            usernameVariable: 'DOCKER_USERNAME',
                            passwordVariable: 'DOCKER_PASSWORD'
                        )]) {
                            sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        }
                        
                        sh "docker push ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
                        sh "docker push ${env.DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            sh 'docker logout'
        }
    }
}