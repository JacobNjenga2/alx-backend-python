#!/bin/bash

# kurbeScript - Kubernetes Setup and Verification Script
# This script sets up a local Kubernetes cluster using Minikube

set -e  # Exit on any error

echo "🚀 Starting Kubernetes Setup Process..."

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Minikube on Windows
install_minikube_windows() {
    echo "📥 Installing Minikube on Windows..."
    
    # Check if Chocolatey is installed
    if ! command_exists choco; then
        echo "🍫 Installing Chocolatey package manager..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    fi
    
    # Install Minikube using Chocolatey
    choco install minikube -y
    echo "✅ Minikube installed successfully!"
}

# Function to install kubectl on Windows
install_kubectl_windows() {
    echo "📥 Installing kubectl on Windows..."
    
    if (!command_exists choco); then
        echo "🍫 Installing Chocolatey first..."
        install_minikube_windows
    fi
    
    choco install kubernetes-cli -y
    echo "✅ kubectl installed successfully!"
}

# Function to install Minikube on Linux/macOS
install_minikube_unix() {
    echo "📥 Installing Minikube on Unix-like system..."
    
    if command_exists curl; then
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        rm minikube-linux-amd64
    elif command_exists wget; then
        wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        rm minikube-linux-amd64
    else
        echo "❌ Neither curl nor wget found. Please install one of them first."
        exit 1
    fi
    
    echo "✅ Minikube installed successfully!"
}

# Function to install kubectl on Linux/macOS
install_kubectl_unix() {
    echo "📥 Installing kubectl on Unix-like system..."
    
    if command_exists curl; then
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm kubectl
    elif command_exists wget; then
        wget "https://dl.k8s.io/release/$(wget -qO- https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm kubectl
    else
        echo "❌ Neither curl nor wget found. Please install one of them first."
        exit 1
    fi
    
    echo "✅ kubectl installed successfully!"
}

# Detect OS and install accordingly
detect_and_install() {
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        echo "🪟 Windows detected"
        install_minikube_windows
        install_kubectl_windows
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "🐧 Linux detected"
        install_minikube_unix
        install_kubectl_unix
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "🍎 macOS detected"
        install_minikube_unix
        install_kubectl_unix
    else
        echo "❓ Unsupported OS: $OSTYPE"
        exit 1
    fi
}

# Check if Minikube is already installed
if ! command_exists minikube; then
    echo "🔍 Minikube not found. Installing..."
    detect_and_install
else
    echo "✅ Minikube is already installed"
fi

# Check if kubectl is already installed
if ! command_exists kubectl; then
    echo "🔍 kubectl not found. Installing..."
    detect_and_install
else
    echo "✅ kubectl is already installed"
fi

# Start Minikube cluster
echo "🚀 Starting Minikube cluster..."
minikube start --driver=docker --memory=4096 --cpus=2

# Wait for cluster to be ready
echo "⏳ Waiting for cluster to be ready..."
kubectl wait --for=condition=Ready nodes --all --timeout=300s

# Verify cluster is running
echo "🔍 Verifying cluster status..."
kubectl cluster-info

# Check cluster health
echo "🏥 Checking cluster health..."
kubectl get nodes -o wide

# Retrieve available pods
echo "📦 Retrieving available pods..."
kubectl get pods --all-namespaces

# Show cluster status
echo "📊 Cluster status:"
minikube status

# Enable addons for better development experience
echo "🔧 Enabling useful addons..."
minikube addons enable dashboard
minikube addons enable ingress

echo ""
echo "🎉 Kubernetes cluster setup complete!"
echo ""
echo "📋 Useful commands:"
echo "  - View dashboard: minikube dashboard"
echo "  - Stop cluster: minikube stop"
echo "  - Delete cluster: minikube delete"
echo "  - View cluster status: minikube status"
echo "  - Get pods: kubectl get pods"
echo "  - Get services: kubectl get services"
echo ""
echo "🚀 Ready for Task 1: Deploy the Django Messaging App!"
