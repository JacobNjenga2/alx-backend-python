name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DJANGO_SETTINGS_MODULE: messaging_app.settings
  SECRET_KEY: 'test-secret-key-for-ci'
  DEBUG: 'False'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: messaging_db_test
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: messaging_password123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev pkg-config gcc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 coverage pytest-django pytest-cov

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P 3306 --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Set up test environment variables
      run: |
        echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "MYSQL_PORT=3306" >> $GITHUB_ENV
        echo "MYSQL_DB=messaging_db_test" >> $GITHUB_ENV
        echo "MYSQL_USER=messaging_user" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=messaging_password123" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=*" >> $GITHUB_ENV

    - name: Run Django system checks
      run: |
        python manage.py check --deploy

    - name: Run Django migrations
      run: |
        python manage.py migrate --run-syncdb

    - name: Run Django tests with coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml

    - name: Upload coverage reports to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-python-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-pip-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run flake8 linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with Black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Run type checking with mypy (if configured)
      run: |
        # Only run mypy if mypy.ini exists
        if [ -f "mypy.ini" ] || [ -f "setup.cfg" ] || [ -f "pyproject.toml" ]; then
          mypy .
        else
          echo "No mypy configuration found, skipping type checking"
        fi
      continue-on-error: true

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --skip B101

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 30

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "Test job status: ${{ needs.test.result }}"
        echo "Lint job status: ${{ needs.lint.result }}"
        echo "Security job status: ${{ needs.security.result }}"
        
        if [ "${{ needs.test.result }}" = "failure" ]; then
          echo "‚ùå Tests failed"
          exit 1
        fi
        
        if [ "${{ needs.lint.result }}" = "failure" ]; then
          echo "‚ùå Linting failed"
          exit 1
        fi
        
        echo "‚úÖ All checks passed!"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-status]
    if: always()

    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.build-status.result }}" = "success" ]; then
          echo "üéâ Build successful! All tests and quality checks passed."
        else
          echo "üí• Build failed! Check the logs for details."
        fi
