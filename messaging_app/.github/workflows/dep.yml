name: Docker Build and Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: django-messaging-app

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image (for PR)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run Trivy vulnerability scanner
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:develop"
        
        # Here you would typically:
        # 1. Connect to your staging Kubernetes cluster
        # 2. Update the deployment with the new image
        # 3. Verify the deployment
        
        # Example kubectl commands (uncomment and configure when ready):
        # kubectl set image deployment/django-messaging-app django-app=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:develop
        # kubectl rollout status deployment/django-messaging-app
        
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to production environment
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        
        # Here you would typically:
        # 1. Connect to your production Kubernetes cluster
        # 2. Update the deployment with the new image
        # 3. Verify the deployment
        # 4. Run smoke tests
        
        # Example kubectl commands (uncomment and configure when ready):
        # kubectl set image deployment/django-messaging-app django-app=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        # kubectl rollout status deployment/django-messaging-app
        
        echo "‚úÖ Production deployment completed"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && github.event_name == 'push'

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Clean up old Docker images
      run: |
        echo "üßπ Cleaning up old Docker images..."
        
        # Keep only the latest 10 images to save storage
        # This would require additional tools or API calls to Docker Hub
        # For now, just log the action
        
        echo "‚úÖ Cleanup completed (placeholder - implement with Docker Hub API)"

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Send deployment notification
      run: |
        echo "üì¢ Deployment Notification"
        echo "=========================="
        echo "Build status: ${{ needs.build-and-push.result }}"
        echo "Staging deploy: ${{ needs.deploy-staging.result }}"
        echo "Production deploy: ${{ needs.deploy-production.result }}"
        
        if [ "${{ needs.build-and-push.result }}" = "success" ]; then
          echo "‚úÖ Docker image built and pushed successfully"
        else
          echo "‚ùå Docker build failed"
        fi
        
        # Here you could send notifications to Slack, email, etc.
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment completed"}' $SLACK_WEBHOOK_URL
